# main_loop.py
from ui.ui_utils import clear_screen, loading_screen, print_header
from game_data.game_state import game_state
from ui.tower_menu import tower_menu
from ui.heroes_menu import heroes_menu
from ui.buildings_menu import buildings_menu
from systems.hero_system import Hero

def initialize_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏"""
    print_header("üèùÔ∏è –õ–µ—Ç–∞—é—â–∏–π –æ—Å—Ç—Ä–æ–≤ - –ó–∞–≥—Ä—É–∑–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    save_info = game_state["save_system"].get_save_info(1)
    if save_info:
        print("üíæ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:")
        print(f"   –≠—Ç–∞–∂: {save_info['tower_level']}")
        print(f"   –ì–µ—Ä–æ–µ–≤: {save_info['hero_count']}")
        print(f"   –ó–æ–ª–æ—Ç–æ: {save_info['gold']}")
        print(f"   –í—Ä–µ–º—è: {save_info['timestamp'][:10]}")
        print("\n1. üéÆ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É")
        print("2. üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞")
        
        try:
            choice = int(input("\nüéØ –í–∞—à –≤—ã–±–æ—Ä: "))
            if choice == 1:
                if game_state["save_system"].load_game(game_state, 1):
                    loading_screen(2, "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
                    loading_screen(1)
        except ValueError:
            pass
    
    # –ù–æ–≤–∞—è –∏–≥—Ä–∞
    loading_screen(2, "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞")
    return True

def check_new_unlocks(game_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–∞–∂–µ–π"""
    tower_level = game_state["tower_level"]
    unlocks = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    research_mgr = game_state["research"]
    for research_key, research in research_mgr.researches.items():
        if research.level < research.max_level:
            next_level = research.level + 1
            if next_level <= len(research.reveal_floors):
                required_floor = research.reveal_floors[next_level - 1]
                if tower_level >= required_floor and (research.level == 0 or research.level < next_level):
                    unlocks.append(f"üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {research.name} —É—Ä.{next_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–∞–Ω–∏—è
    buildings = game_state["buildings"].buildings
    building_unlocks = {
        3: "üè™ –°—Ç–æ–ª–æ–≤–∞—è (—É—Ä–æ–≤–µ–Ω—å 1)",
        5: "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è (—É—Ä–æ–≤–µ–Ω—å 1)", 
        7: "‚öíÔ∏è –ö—É–∑–Ω–∏—Ü–∞ (—É—Ä–æ–≤–µ–Ω—å 1)",
        10: "üåü –ö–æ–º–Ω–∞—Ç–∞ –≤–æ–∑–≤—ã—à–µ–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å 1)",
        15: "‚öóÔ∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞"
    }
    
    for floor, building_name in building_unlocks.items():
        if tower_level >= floor:
            unlocks.append(f"üèóÔ∏è {building_name}")
    
    return unlocks

def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã"""
    if not initialize_game():
        return
    
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–¥–∞–Ω–∏–π
        game_state["buildings"].unlock_buildings(game_state["tower_level"])
        
        print_header("üèùÔ∏è –õ–µ—Ç–∞—é—â–∏–π –æ—Å—Ç—Ä–æ–≤ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–æ–±–±–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        wallet = game_state["wallet"]
        print(f"üí∞ {wallet}")
        print(f"üè∞ –≠—Ç–∞–∂ –±–∞—à–Ω–∏: {game_state['tower_level']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        new_unlocks = check_new_unlocks(game_state)
        if new_unlocks:
            print("üéâ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
            for unlock in new_unlocks:
                print(f"   {unlock}")
            print()

        dormitory = game_state["buildings"].get_building("dormitory")
        hero_count = len(game_state["heroes"])
        max_capacity = dormitory.get_capacity()
        print(f"üë• –ì–µ—Ä–æ–∏: {hero_count}/{max_capacity}")
        print()
        
        # –ù–û–í–û–ï –ú–ï–ù–Æ
        print("1. üè∞ –ë–∞—à–Ω—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
        print("2. üéØ –ì–µ—Ä–æ–∏")
        print("3. üèõÔ∏è –ó–¥–∞–Ω–∏—è")
        print("4. üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print("0. üö™ –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
        print()
        
        try:
            choice = int(input("üéØ –í–∞—à –≤—ã–±–æ—Ä: "))
        except ValueError:
            loading_screen(1, "‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
            continue
        
        if choice == 1:
            loading_screen(1.5, "üåÄ –ü–µ—Ä–µ—Ö–æ–¥")
            tower_menu(game_state)
        elif choice == 2:
            heroes_menu(game_state)
        elif choice == 3:
            loading_screen(1.5, "üåÄ –ü–µ—Ä–µ—Ö–æ–¥")
            buildings_menu(game_state)
        elif choice == 4:
            from ui.save_menu import save_menu
            save_menu(game_state)
        elif choice == 0:
            loading_screen(1.5, "üåÄ –ü–µ—Ä–µ—Ö–æ–¥")
            print_header("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            print("‚ú® –°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏–≥—Ä–∞–ª–∏ –≤ TrueWorld! –ú—ã –∂–¥—ë–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, –º–∞—Å—Ç–µ—Ä!")
            break
        else:
            loading_screen(1, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
  main_menu()