#role_system.py
class RoleSystem:
    def __init__(self, game_state):
        self.game_state = game_state
        self.roles = {
            'cook': {
                'building': 'canteen',
                'title': 'üç≥ –ü–æ–≤–∞—Ä',
                'bonus': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç'
            },
            'blacksmith': {
                'building': 'forge', 
                'title': '‚öíÔ∏è –ö—É–∑–Ω–µ—Ü',
                'bonus': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞—Ç–∞–∫—É –≥–µ—Ä–æ–µ–≤'
            },
            'researcher': {
                'building': 'laboratory',
                'title': 'üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                'bonus': '–£—Å–∫–æ—Ä—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'
            }
        }
    
    def is_hero_available(self, hero):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≥–µ—Ä–æ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª—å"""
        # –ì–µ—Ä–æ–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        party_system = self.game_state.get("party_system", {})
        parties = party_system.get("parties", {})
        
        for party_id, party_data in parties.items():
            if id(hero) in party_data.get("heroes", []):
                return False
        
        # –ì–µ—Ä–æ–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥—Ä—É–≥—É—é —Ä–æ–ª—å
        buildings = self.game_state["buildings"].buildings
        for building in buildings.values():
            if hasattr(building, 'assigned_hero') and building.assigned_hero == hero:
                return False
        
        return True
    
    def get_available_heroes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ—Ä–æ–µ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª–∏"""
        return [hero for hero in self.game_state["heroes"] if self.is_hero_available(hero)]
    
    def assign_hero(self, role_name, hero):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –≥–µ—Ä–æ—è –Ω–∞ —Ä–æ–ª—å"""
        if not self.is_hero_available(hero):
            return False, "–ì–µ—Ä–æ–π —É–∂–µ –∑–∞–Ω—è—Ç –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏!"
        
        role = self.roles[role_name]
        building = self.game_state["buildings"].get_building(role['building'])
        
        if building.level == 0:
            return False, "–ó–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!"
        
        # –°–Ω–∏–º–∞–µ–º –≥–µ—Ä–æ—è —Å –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
        self.remove_hero_from_all_roles(hero)
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å
        building.assigned_hero = hero
        return True, f"{hero.name} –Ω–∞–∑–Ω–∞—á–µ–Ω {role['title']}!"
    
    def remove_hero_from_all_roles(self, hero):
        """–°–Ω–∏–º–∞–µ—Ç –≥–µ—Ä–æ—è —Å–æ –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
        buildings = self.game_state["buildings"].buildings
        for building in buildings.values():
            if hasattr(building, 'assigned_hero') and building.assigned_hero == hero:
                building.assigned_hero = None
    
    def get_assigned_heroes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤"""
        assigned = {}
        buildings = self.game_state["buildings"].buildings
        for building_name, building in buildings.items():
            if hasattr(building, 'assigned_hero') and building.assigned_hero:
                assigned[building_name] = building.assigned_hero
        return assigned
    
    def get_hero_role(self, hero):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª—å –≥–µ—Ä–æ—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω"""
        buildings = self.game_state["buildings"].buildings
        for building_name, building in buildings.items():
            if hasattr(building, 'assigned_hero') and building.assigned_hero == hero:
                for role_name, role_info in self.roles.items():
                    if role_info['building'] == building_name:
                        return role_info['title']
        return None