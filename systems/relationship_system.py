# relationship_system.py
# systems/relationship_system.py
class RelationshipSystem:
    # –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    COMPATIBILITY_MATRIX = {
        "–•—Ä–∞–±—Ä—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 1.15, "–¢—Ä—É—Å–ª–∏–≤—ã–π": 0.8, "–ú—É–¥—Ä—ã–π": 1.1, "–î–æ–±—Ä—ã–π": 1.05, "–ó–ª–æ–π": 0.9},
        "–¢—Ä—É—Å–ª–∏–≤—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 0.8, "–¢—Ä—É—Å–ª–∏–≤—ã–π": 1.0, "–•–∏—Ç—Ä—ã–π": 1.1, "–õ–µ–Ω–∏–≤—ã–π": 1.05},
        "–ú—É–¥—Ä—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 1.1, "–ú—É–¥—Ä—ã–π": 1.1, "–•–∏—Ç—Ä—ã–π": 1.05, "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π": 1.15},
        "–•–∏—Ç—Ä—ã–π": {"–¢—Ä—É—Å–ª–∏–≤—ã–π": 1.1, "–ú—É–¥—Ä—ã–π": 1.05, "–•–∏—Ç—Ä—ã–π": 1.0, "–ó–ª–æ–π": 1.1},
        "–î–æ–±—Ä—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 1.05, "–î–æ–±—Ä—ã–π": 1.1, "–ú—É–¥—Ä—ã–π": 1.05, "–ó–ª–æ–π": 0.7},
        "–ó–ª–æ–π": {"–•—Ä–∞–±—Ä—ã–π": 0.9, "–ó–ª–æ–π": 1.0, "–•–∏—Ç—Ä—ã–π": 1.1, "–î–æ–±—Ä—ã–π": 0.7},
        "–õ–µ–Ω–∏–≤—ã–π": {"–¢—Ä—É—Å–ª–∏–≤—ã–π": 1.05, "–õ–µ–Ω–∏–≤—ã–π": 1.0, "–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π": 1.1},
        "–í–µ–∑—É—á–∏–π": {"–•—Ä–∞–±—Ä—ã–π": 1.1, "–í–µ–∑—É—á–∏–π": 1.2, "–í—Å–µ": 1.05},
        "–°–∏–ª—å–Ω—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 1.1, "–°–∏–ª—å–Ω—ã–π": 1.1, "–°–ª–∞–±—ã–π": 0.9},
        "–°–ª–∞–±—ã–π": {"–°–∏–ª—å–Ω—ã–π": 0.9, "–°–ª–∞–±—ã–π": 1.0, "–•–∏—Ç—Ä—ã–π": 1.05},
        "–ë—ã—Å—Ç—Ä—ã–π": {"–•—Ä–∞–±—Ä—ã–π": 1.05, "–ë—ã—Å—Ç—Ä—ã–π": 1.1, "–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π": 0.8},
        "–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π": {"–ë—ã—Å—Ç—Ä—ã–π": 0.8, "–ú–µ–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π": 1.0, "–õ–µ–Ω–∏–≤—ã–π": 1.1},
        "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π": {"–ú—É–¥—Ä—ã–π": 1.15, "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π": 1.1, "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π": 0.9},
        "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π": {"–ú—É–¥—Ä—ã–π": 1.05, "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π": 1.1, "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π": 0.9}
    }
    
    # –ë–æ–Ω—É—Å—ã –∑–∞ –Ω–∞–±–æ—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–µ—Ä—Ç
    SET_BONUSES = {
        3: 1.15,  # +15% –∑–∞ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–µ—Ä—Ç—ã
        4: 1.25,  # +25% –∑–∞ 4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–µ—Ä—Ç—ã  
        5: 1.4    # +40% –∑–∞ 5+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–µ—Ä—Ç
    }
    
    @staticmethod
    def calculate_party_bonus(heroes):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä—Ç"""
        if not heroes or len(heroes) < 2:
            return 1.0  # –ù–µ—Ç –±–æ–Ω—É—Å–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–µ–∫ –∏–ª–∏ –ø—É—Å—Ç—ã—Ö –≥—Ä—É–ø–ø
        
        total_bonus = 1.0
        trait_counts = {}
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π —á–µ—Ä—Ç—ã
        for hero in heroes:
            trait = hero.character
            trait_counts[trait] = trait_counts.get(trait, 0) + 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –Ω–∞–±–æ—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–µ—Ä—Ç
        for trait, count in trait_counts.items():
            if count >= 3:
                set_bonus = RelationshipSystem.SET_BONUSES.get(count, 1.0)
                total_bonus *= set_bonus
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≥–µ—Ä–æ—è–º–∏
        for i, hero1 in enumerate(heroes):
            for j, hero2 in enumerate(heroes):
                if i != j:  # –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–µ—Ä–æ—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
                    trait1 = hero1.character
                    trait2 = hero2.character
                    
                    compatibility = RelationshipSystem.COMPATIBILITY_MATRIX.get(
                        trait1, {}).get(trait2, 1.0)
                    
                    total_bonus *= compatibility
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        return max(0.5, min(2.0, total_bonus))
    
    @staticmethod
    def get_relationship_description(bonus):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –±–æ–Ω—É—Å–∞"""
        if bonus >= 1.5:
            return "üéâ –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è! (+{:.0f}%)".format((bonus-1)*100)
        elif bonus >= 1.2:
            return "üëç –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (+{:.0f}%)".format((bonus-1)*100)
        elif bonus >= 1.0:
            return "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (+{:.0f}%)".format((bonus-1)*100)
        elif bonus >= 0.8:
            return "‚ö†Ô∏è –ù–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ({:.0f}%)".format((bonus-1)*100)
        else:
            return "‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –≥—Ä—É–ø–ø–µ ({:.0f}%)".format((bonus-1)*100)
    
    @staticmethod
    def get_party_synergy_details(heroes):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω–µ—Ä–≥–∏–∏ –≥—Ä—É–ø–ø—ã"""
        if not heroes:
            return "–ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞"
        
        details = []
        trait_counts = {}
        
        for hero in heroes:
            trait = hero.character
            trait_counts[trait] = trait_counts.get(trait, 0) + 1
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–∞—Ö —á–µ—Ä—Ç
        for trait, count in trait_counts.items():
            if count >= 3:
                bonus = RelationshipSystem.SET_BONUSES.get(count, 1.0)
                details.append(f"üéØ {count}x {trait}: +{int((bonus-1)*100)}%")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        for i, hero1 in enumerate(heroes):
            for j, hero2 in enumerate(heroes):
                if i < j:  # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã
                    trait1 = hero1.character
                    trait2 = hero2.character
                    compat = RelationshipSystem.COMPATIBILITY_MATRIX.get(trait1, {}).get(trait2, 1.0)
                    
                    if compat != 1.0:
                        arrow = "‚Üë" if compat > 1.0 else "‚Üì"
                        details.append(f"üîó {trait1} ‚Üî {trait2}: {arrow}{abs(int((compat-1)*100))}%")
        
        return details