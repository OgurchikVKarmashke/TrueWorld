# systems.tower_system.py
from systems.hero_system import Hero
from systems.combat_system import Combat
from systems.party_system import PartySystem
from game_data.monsters_data import MONSTER_SPAWN_CHANCES
from ui.tower_ui import (
    show_tower_management_menu, show_party_selection, show_expedition_preview,
    show_victory_screen, show_defeat_screen, show_tower_progress,
    show_healing_confirmation
)
from ui.ui_utils import loading_screen, press_enter_to_continue
import random

def choose_parties_for_floor(game_state, required_groups=1):
    party_system = PartySystem(game_state)
    available_parties = list(party_system.parties.items())

    while True:
        choice = show_party_selection(available_parties, required_groups, game_state) 

        if choice in ("0", "b", "B"):
            return None, None

        try:
            chosen_ids = [int(x) for x in choice.split(",") if x.strip().isdigit()]
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
            press_enter_to_continue()
            continue

        if len(chosen_ids) != required_groups:
            print(f"‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ {required_groups} –≥—Ä—É–ø–ø—ã!")
            press_enter_to_continue()
            continue

        chosen_parties = []
        chosen_party_ids = []
        for idx in chosen_ids:
            if 1 <= idx <= len(available_parties):
                pid, pdata = available_parties[idx - 1]
                chosen_parties.append(pdata)
                chosen_party_ids.append(pid)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!")
                break
        else:
            return chosen_parties, chosen_party_ids

def send_to_tower(game_state):
    current_floor = game_state["tower_level"]
    required_groups = 2 if current_floor % 10 == 0 else 1

    selected_parties, selected_party_ids = choose_parties_for_floor(game_state, required_groups)
    if selected_parties is None:
        return

    active_party_heroes = []
    for party_id in selected_party_ids:
        heroes = PartySystem(game_state).get_party_heroes(party_id)
        active_party_heroes.extend(heroes)

    if not active_party_heroes:
        print("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤!")
        press_enter_to_continue()
        return

    choice = show_expedition_preview(active_party_heroes, current_floor)
    if choice is None or choice == 0:
        return
    
    loading_screen(2, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—Ä—è–¥–∞")
    
    combat = Combat(active_party_heroes, current_floor, game_state)
    victory, log, total_exp = combat.start_combat()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∏–≤—ã—Ö –∏ –º–µ—Ä—Ç–≤—ã—Ö –≥–µ—Ä–æ–µ–≤ –ü–û–°–õ–ï –±–æ—è
    dead_heroes = [h for h in active_party_heroes if not h.is_alive]
    living_heroes = [h for h in active_party_heroes if h.is_alive]
    
    if victory:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –±–æ—è
        rewards = getattr(combat, 'victory_rewards', {})
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—ã—Ç –º–µ–∂–¥—É –≤—ã–∂–∏–≤—à–∏–º–∏ –≥–µ—Ä–æ—è–º–∏
        if living_heroes and total_exp > 0:
            exp_per_hero = total_exp // len(living_heroes)
            for hero in living_heroes:
                result = hero.add_experience(exp_per_hero)
                if result:
                    print(result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø, —É–±–∏—Ä–∞—è –ø–æ–≥–∏–±—à–∏—Ö –≥–µ—Ä–æ–µ–≤
        party_system = PartySystem(game_state)
        for party_id in selected_party_ids:
            party_heroes = party_system.get_party_heroes(party_id)
            party_system.parties[party_id]["heroes"] = [id(h) for h in party_heroes if h.is_alive]

        # –ü–æ–≤—ã—à–∞–µ–º —ç—Ç–∞–∂ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∞ –ø–æ–±–µ–¥–∞
        game_state["tower_level"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂
        if game_state["tower_level"] > game_state.get("max_tower_floor", 1):
            game_state["max_tower_floor"] = game_state["tower_level"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        show_victory_screen(
            reward=rewards.get('gold', 0),
            total_exp=total_exp,
            new_floor=game_state["tower_level"],
            dead_heroes=dead_heroes,
            item_rewards=rewards.get('items', {}),
            game_state=game_state  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
        )
        
    else:
        # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞ —ç—Ç–∞–∂ –Ω–∏–∂–µ
        game_state["tower_level"] = max(1, current_floor - 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø
        party_system = PartySystem(game_state)
        for party_id in selected_party_ids:
            party_heroes = party_system.get_party_heroes(party_id)
            party_system.parties[party_id]["heroes"] = [id(h) for h in party_heroes if h.is_alive]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        show_defeat_screen(dead_heroes, game_state["tower_level"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    game_state["save_system"].save_game(game_state)
    return victory

def show_floor_monster_info(floor_level):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —ç—Ç–∞–∂–µ"""
    from systems.combat_system import Monster
    from game_data.monsters_data import MONSTER_BASE_STATS, BOSS_STATS
    
    info = f"\nüìä –ú–æ–Ω—Å—Ç—Ä—ã –Ω–∞ —ç—Ç–∞–∂–µ {floor_level}:\n"
    
    if floor_level % 5 == 0:
        # –ë–æ—Å—Å-—ç—Ç–∞–∂
        possible_bosses = []
        for boss_name, boss_data in BOSS_STATS.items():
            if floor_level >= boss_data["min_level"]:
                possible_bosses.append(boss_name)
        
        if possible_bosses:
            boss_name = random.choice(possible_bosses)
            boss_level = floor_level + 2
            monster = Monster(boss_name, boss_level, "boss")
            info += f"üëë –ë–û–°–°: {boss_name} (–£—Ä. {boss_level})\n"
            info += f"   ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster.health_max}\n"
            info += f"   ‚öîÔ∏è –ê—Ç–∞–∫–∞: {monster.attack}\n"
            info += f"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {monster.defense}\n"
            
            # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Å—Å–∞
            from game_data.bosses_data import BOSS_ABILITIES
            if boss_name in BOSS_ABILITIES:
                info += f"   ‚ú® –°–ø–æ—Å–æ–±abilities:\n"
                for ability_name, ability_data in BOSS_ABILITIES[boss_name].items():
                    info += f"      - {ability_name} (—à–∞–Ω—Å: {ability_data['chance']*100}%)\n"
        else:
            info += "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Å—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
    else:
        # –û–±—ã—á–Ω—ã–π —ç—Ç–∞–∂
        floor_chances = {}
        for floor, chances in MONSTER_SPAWN_CHANCES.items():
            if floor_level <= floor:
                floor_chances = chances
                break
        
        if not floor_chances:
            floor_chances = MONSTER_SPAWN_CHANCES[max(MONSTER_SPAWN_CHANCES.keys())]
        
        info += "–í–æ–∑–º–æ–∂–Ω—ã–µ –º–æ–Ω—Å—Ç—Ä—ã:\n"
        for monster_type, chance in floor_chances.items():
            monster_data = MONSTER_BASE_STATS.get(monster_type, {})
            level = max(1, floor_level + random.randint(-1, 1))
            health = monster_data.get("health_per_level", 8) * level
            attack = monster_data.get("attack_per_level", 2) * level
            defense = monster_data.get("defense_per_level", 1) * level
            
            info += f"  {monster_type}: ‚ù§Ô∏è{health} ‚öîÔ∏è{attack} üõ°Ô∏è{defense} (—à–∞–Ω—Å: {chance})\n"
    
    return info

def view_tower_progress(game_state):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –±–∞—à–Ω–µ"""
    floor_info = show_floor_monster_info(game_state["tower_level"])
    show_tower_progress(game_state, floor_info)

def heal_all_heroes(game_state):
    """–õ–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∑–∞ –∑–æ–ª–æ—Ç–æ"""
    wallet = game_state["wallet"]
    healing_cost = 100
    
    if wallet.gold < healing_cost:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {healing_cost}, –µ—Å—Ç—å {wallet.gold}")
        press_enter_to_continue()
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≥–µ—Ä–æ–µ–≤ –Ω—É–∂–Ω–æ –≤—ã–ª–µ—á–∏—Ç—å
    wounded_heroes = [h for h in game_state["heroes"] if h.is_alive and h.health_current < h.health_max]
    
    if not wounded_heroes:
        print("‚úÖ –í—Å–µ –≥–µ—Ä–æ–∏ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤—ã!")
        press_enter_to_continue()
        return
    
    confirm = show_healing_confirmation(len(wounded_heroes), healing_cost)
    
    if confirm == 1:
        wallet.subtract_gold(healing_cost)
        for hero in wounded_heroes:
            hero.health_current = hero.health_max
            hero.mana_current = hero.mana_max
        
        print(f"‚úÖ –í—Å–µ –≥–µ—Ä–æ–∏ –≤—ã–ª–µ—á–µ–Ω—ã! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {healing_cost} –∑–æ–ª–æ—Ç–∞")
    else:
        print("‚ùå –õ–µ—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    press_enter_to_continue()

def tower_management(game_state):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—à–Ω–µ–π"""
    while True:
        choice = show_tower_management_menu(game_state)
        
        if choice is None:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
            press_enter_to_continue()
            continue
        
        if choice == 1:
            result = send_to_tower(game_state)
            # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–±–µ–¥–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if result:
                break
        elif choice == 2:
            view_tower_progress(game_state)
        elif choice == 3:
            heal_all_heroes(game_state)
        elif choice == 0:
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            press_enter_to_continue()