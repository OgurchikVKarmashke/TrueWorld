# systems.combat_modifiers.traps.py
from systems.combat_modifiers import register_modifier
import random

class TrapModifier:
    def __init__(self, trap_type):
        self.trap_type = trap_type
        self.traps = {
            "–æ–≥–Ω–µ–Ω–Ω–∞—è_–ª–æ–≤—É—à–∫–∞": {
                "damage": 0.3,
                "max_uses": 3,
                "description": "üî• –û–≥–Ω–µ–Ω–Ω–∞—è –ª–æ–≤—É—à–∫–∞: 30% —É—Ä–æ–Ω–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ (–º–∞–∫—Å. 3 —Ä–∞–∑–∞)"
            },
            "–ª–µ–¥—è–Ω–∞—è_–ª–æ–≤—É—à–∫–∞": {
                "slow": 0.4,
                "freeze_chance": 0.2,
                "max_uses": 2,
                "description": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–∞—è –ª–æ–≤—É—à–∫–∞: -40% —Å–∫–æ—Ä–æ—Å—Ç–∏, 20% —à–∞–Ω—Å –∑–∞–º–æ—Ä–æ–∑–∫–∏ (–º–∞–∫—Å. 2 —Ä–∞–∑–∞)"
            },
            "—è–¥–æ–≤–∏—Ç–∞—è_–ª–æ–≤—É—à–∫–∞": {
                "poison_damage": 0.1,
                "max_uses": 4,
                "description": "‚ò†Ô∏è –Ø–¥–æ–≤–∏—Ç–∞—è –ª–æ–≤—É—à–∫–∞: 10% —É—Ä–æ–Ω–∞ —è–¥–æ–º –∫–∞–∂–¥—ã–π —Ö–æ–¥ (–º–∞–∫—Å. 4 —Ä–∞–∑–∞)"
            },
            "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è_–ª–æ–≤—É—à–∫–∞": {
                "stun_chance": 0.25,
                "max_uses": 2,
                "description": "‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ª–æ–≤—É—à–∫–∞: 25% —à–∞–Ω—Å –æ–≥–ª—É—à–µ–Ω–∏—è (–º–∞–∫—Å. 2 —Ä–∞–∑–∞)"
            }
        }
        self.uses_remaining = 0
    
    def apply(self, combat_system):
        if self.trap_type in self.traps:
            trap = self.traps[self.trap_type]
            self.uses_remaining = trap["max_uses"]
            combat_system.trap_modifier = self  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—é
            return trap
        return {}
    
    def trigger_trap(self, target):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ–≤—É—à–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —ç—Ñ—Ñ–µ–∫—Ç–µ"""
        if self.uses_remaining <= 0:
            return None
        
        trap = self.traps[self.trap_type]
        self.uses_remaining -= 1
        
        if "damage" in trap:
            damage = int(target.health_max * trap["damage"])
            target.health_current = max(0, target.health_current - damage)
            return f"{target.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç {self.trap_type}! –ü–æ–ª—É—á–∞–µ—Ç {damage} —É—Ä–æ–Ω–∞."
        
        elif "freeze_chance" in trap and random.random() < trap["freeze_chance"]:
            target.frozen = True
            return f"{target.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç {self.trap_type}! –ó–∞–º–æ—Ä–æ–∂–µ–Ω."
        
        elif "stun_chance" in trap and random.random() < trap["stun_chance"]:
            target.stunned = True
            return f"{target.name} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç {self.trap_type}! –û–≥–ª—É—à–µ–Ω."
        
        return None

register_modifier("trap", TrapModifier)