# building_system.py
# systems.building_system.py
from ui.building_manager import calculate_max_building_level

class Building:
    def __init__(self, name, description, max_level, base_cost, built=False, unlock_floor=0):
        self.name = name
        self.description = description
        self.level = 1 if built else 0
        self.max_level = max_level
        self.base_cost = base_cost
        self.built = built
        self.unlock_floor = unlock_floor  # –≠—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        self.unlocked = built  # –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ, —Ç–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

    def is_available(self, tower_level):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏/—É–ª—É—á—à–µ–Ω–∏—è"""
        return tower_level >= self.unlock_floor

    def build_cost(self):
        return self.base_cost * 2

    def upgrade_cost(self):
        if self.level == 0:
            return self.build_cost()
        return self.base_cost * self.level

    def can_upgrade(self, tower_level):
        """–ú–æ–∂–Ω–æ –ª–∏ —É–ª—É—á—à–∏—Ç—å –∑–¥–∞–Ω–∏–µ"""
        max_allowed_level = calculate_max_building_level(tower_level)
        return (self.is_available(tower_level) and 
                self.level < self.max_level and 
                self.level < max_allowed_level and
                (self.level > 0 or not self.built))

    def effect(self):
        pass

    def __str__(self):
        status = "‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ" if self.built else "üöß –ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ"
        return f"{self.name} (–£—Ä. {self.level}) - {status}"

class Dormitory(Building):
    def __init__(self):
        super().__init__(
            "–û–±—â–µ–∂–∏—Ç–∏–µ", 
            "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –≥–µ—Ä–æ–µ–≤", 
            20,
            50,
            built=True,
            unlock_floor=0
        )
        self.base_capacity = 5

    def effect(self):
        capacity = self.get_capacity()
        return f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {capacity} –≥–µ—Ä–æ–µ–≤"
    
    def get_capacity(self):
        return self.base_capacity + ((self.level - 1) * 2)

class SummonHall(Building):
    def __init__(self):
        super().__init__(
            "–ó–∞–ª –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ–µ–≤",
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤",
            1,  # –ù–µ —É–ª—É—á—à–∞–µ—Ç—Å—è
            0,   # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ
            built=True,
            unlock_floor=0
        )

    def effect(self):
        return "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–∑—ã–≤–∞ –≥–µ—Ä–æ–µ–≤"

class SynthesisRoom(Building):
    def __init__(self):
        super().__init__(
            "–ö–æ–º–Ω–∞—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –≥–µ—Ä–æ–µ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è",
            10,
            100,
            built=True,
            unlock_floor=0
        )

    def effect(self):
        return f"–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞: {10 + self.level * 5}"

class Storage(Building):
    def __init__(self):
        super().__init__(
            "–°–∫–ª–∞–¥",
            "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Ä–µ—Å—É—Ä—Å–æ–≤",
            15,
            75,
            built=True,  # –û—Å—Ç–∞–≤–ª—è–µ–º True - —Å–∫–ª–∞–¥ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω
            unlock_floor=3  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 3 —ç—Ç–∞–∂–µ
        )
        self.capacity = 1000

    def effect(self):
        self.capacity = 1000 + (self.level * 500)
        return f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {self.capacity} –∑–æ–ª–æ—Ç–∞"
        
class Laboratory(Building):
    def __init__(self):
        super().__init__(
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            5,
            300,
            built=False,
            unlock_floor=5  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 5 —ç—Ç–∞–∂–µ
        )
        self.current_research = None
        self.research_progress = 0

    def effect(self):
        if self.level == 0:
            return "–ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞"
        if self.current_research:
            return f"–ò—Å—Å–ª–µ–¥—É–µ—Ç—Å—è: {self.current_research} ({self.research_progress}%)"
        return "–ì–æ—Ç–æ–≤–∞ –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º"

class Canteen(Building):
    def __init__(self):
        super().__init__(
            "–°—Ç–æ–ª–æ–≤–∞—è",
            "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–µ—Ä–æ–µ–≤",
            10,
            200,
            built=False,
            unlock_floor=3  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 3 —ç—Ç–∞–∂–µ
        )
        self.assigned_cook = None

class Forge(Building):
    def __init__(self):
        super().__init__(
            "–ö—É–∑–Ω–∏—Ü–∞",
            "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—Ä–∞—Ñ—Ç–∞",
            8,
            300,
            built=False,
            unlock_floor=7  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 7 —ç—Ç–∞–∂–µ
        )

class ElevationRoom(Building):
    def __init__(self):
        super().__init__(
            "–ö–æ–º–Ω–∞—Ç–∞ –≤–æ–∑–≤—ã—à–µ–Ω–∏—è",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å –∑–≤—ë–∑–¥–Ω–æ—Å—Ç—å –≥–µ—Ä–æ–µ–≤",
            5,
            500,
            built=False,
            unlock_floor=10  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 10 —ç—Ç–∞–∂–µ
        )

class BuildingManager:
    def __init__(self):
        self.buildings = {
            "summon_hall": SummonHall(),
            "dormitory": Dormitory(),
            "synthesis": SynthesisRoom(),
            "storage": Storage(),
            "laboratory": Laboratory(),
            "canteen": Canteen(),
            "forge": Forge(),
            "elevation_room": ElevationRoom()
        }
    
    def unlock_buildings(self, tower_level):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–¥–∞–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–∞–∂–µ–π"""
        for building in self.buildings.values():
            if tower_level >= building.unlock_floor and not building.unlocked:
                building.unlocked = True
                print(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–¥–∞–Ω–∏–µ: {building.name}")
    
    def get_available_buildings(self, tower_level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏/—É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        available = {}
        for key, building in self.buildings.items():
            if building.is_available(tower_level) and building.built:  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
                available[key] = building
        return available
    
    def get_all_buildings_for_management(self, tower_level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–¥–∞–Ω–∏—è –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)"""
        available = {}
        for key, building in self.buildings.items():
            if building.is_available(tower_level):
                available[key] = building
        return available
    
    def get_building(self, name):
        return self.buildings.get(name)
    
    def get_new_unlocks(self, tower_level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∑–¥–∞–Ω–∏–π"""
        new_unlocks = []
        for building in self.buildings.values():
            if (tower_level >= building.unlock_floor and 
                not building.built and 
                building.level == 0 and
                building.unlocked):
                new_unlocks.append(building)
        return new_unlocks
    
    def get_built_buildings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è"""
        return {key: building for key, building in self.buildings.items() if building.built}