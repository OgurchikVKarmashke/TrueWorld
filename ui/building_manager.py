# building_manager.py
from ui.ui_utils import print_header, loading_screen, press_enter_to_continue

def manage_buildings(game_state):
    """
    –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è–º–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–π
    if game_state["tower_level"] < 1:
        print_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è–º–∏")
        print("–£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è 1 —ç—Ç–∞–∂–∞ –±–∞—à–Ω–∏!")
        press_enter_to_continue()
        return
    
    while True:
        print_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è–º–∏")
        print(f"–ó–æ–ª–æ—Ç–æ: {game_state['wallet'].gold}")
        print(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏: {game_state['tower_level']}")
        print(f"–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏–π: {calculate_max_building_level(game_state['tower_level'])}")
        print()
        
        buildings = game_state["buildings"].buildings
        available_buildings = {}
        
        # –§–ò–õ–¨–¢–†–£–ï–ú –∑–¥–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        for key, building in buildings.items():
            # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å 5 —ç—Ç–∞–∂–∞
            if key == "laboratory" and game_state["tower_level"] < 5:
                continue
            available_buildings[key] = building
        
        for i, (key, building) in enumerate(available_buildings.items(), 1):
            cost = building.upgrade_cost()
            max_allowed_level = calculate_max_building_level(game_state["tower_level"])
            
            print(f"{i}. {building.name} (–£—Ä. {building.level}/{max_allowed_level})")
            print(f"   {building.description}")
            print(f"   –≠—Ñ—Ñ–µ–∫—Ç: {building.effect()}")
            
            if building.level >= max_allowed_level:
                print(f"   üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–∂–∞")
            elif building.level == 0:
                print(f"   üèóÔ∏è  –ü–æ—Å—Ç—Ä–æ–π–∫–∞: {cost} –∑–æ–ª–æ—Ç–∞")
            elif building.level < max_allowed_level:
                print(f"   üîß –£–ª—É—á—à–µ–Ω–∏–µ: {cost} –∑–æ–ª–æ—Ç–∞")
            print()
        
        print("0. –ù–∞–∑–∞–¥")
        print()
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ: "))
        except ValueError:
            press_enter_to_continue()
            continue
        
        if choice == 0:
            break
        
        building_keys = list(available_buildings.keys())
        if 1 <= choice <= len(building_keys):
            building_key = building_keys[choice - 1]
            building = available_buildings[building_key]
            
            max_allowed_level = calculate_max_building_level(game_state["tower_level"])
            
            if building.level >= max_allowed_level:
                print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–∂–∞!")
                print(f"–ü—Ä–æ–π–¥–∏—Ç–µ –±–æ–ª—å—à–µ —ç—Ç–∞–∂–µ–π –±–∞—à–Ω–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç.")
                press_enter_to_continue()
                continue
            
            cost = building.upgrade_cost()
            if game_state["wallet"].subtract_gold(cost):
                building.level += 1
                if building.level == 1:
                    building.built = True
                    action = "–ø–æ—Å—Ç—Ä–æ–µ–Ω–æ"
                else:
                    action = "—É–ª—É—á—à–µ–Ω–æ"
                
                loading_screen(2, f"{action.capitalize()} {building.name}")
                print(f"{building.name} {action} –¥–æ —É—Ä–æ–≤–Ω—è {building.level}!")
                print(f"–ù–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {building.effect()}")
            else:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            
            press_enter_to_continue()
            game_state["save_system"].save_game(game_state, 1)

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            press_enter_to_continue()

def calculate_max_building_level(tower_level):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–∂–∞ –±–∞—à–Ω–∏
    –ö–∞–∂–¥—ã–µ 5 —ç—Ç–∞–∂–µ–π +1 –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
    """
    base_level = 1
    bonus_levels = tower_level // 5  # –ö–∞–∂–¥—ã–µ 5 —ç—Ç–∞–∂–µ–π +1 —É—Ä–æ–≤–µ–Ω—å
    return base_level + bonus_levels