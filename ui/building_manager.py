# building_manager.py
# ui.building_manager.py
from ui.ui_utils import print_header, loading_screen, press_enter_to_continue

def manage_buildings(game_state):
    """
    –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è–º–∏
    """
    tower_level = game_state["tower_level"]
    building_manager = game_state["buildings"]
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∑–¥–∞–Ω–∏—è
    building_manager.unlock_buildings(tower_level)
    
    while True:
        print_header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è–º–∏")
        print(f"–ó–æ–ª–æ—Ç–æ: {game_state['wallet'].gold}")
        print(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏: {tower_level}")
        print(f"–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏–π: {calculate_max_building_level(tower_level)}")
        print()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
        available_buildings = building_manager.get_all_buildings_for_management(tower_level)
        
        for i, (key, building) in enumerate(available_buildings.items(), 1):
            max_allowed_level = calculate_max_building_level(tower_level)
            
            print(f"{i}. {building.name} (–£—Ä. {building.level}/{building.max_level})")
            print(f"   {building.description}")
            print(f"   –≠—Ñ—Ñ–µ–∫—Ç: {building.effect()}")
            
            if not building.built and building.level == 0:
                print(f"   üèóÔ∏è  –ü–æ—Å—Ç—Ä–æ–π–∫–∞: {building.build_cost()} –∑–æ–ª–æ—Ç–∞")
            elif building.can_upgrade(tower_level):
                print(f"   üîß –£–ª—É—á—à–µ–Ω–∏–µ: {building.upgrade_cost()} –∑–æ–ª–æ—Ç–∞")
            else:
                if building.level >= max_allowed_level:
                    print(f"   üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–∂–∞")
                elif building.level >= building.max_level:
                    print(f"   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                else:
                    print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            print()
        
        print("0. –ù–∞–∑–∞–¥")
        print()
        
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ: "))
        except ValueError:
            press_enter_to_continue()
            continue
        
        if choice == 0:
            break
        
        building_keys = list(available_buildings.keys())
        if 1 <= choice <= len(building_keys):
            building_key = building_keys[choice - 1]
            building = available_buildings[building_key]
            
            if not building.can_upgrade(tower_level):
                print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ –∑–¥–∞–Ω–∏–µ!")
                press_enter_to_continue()
                continue
            
            cost = building.upgrade_cost() if building.level > 0 else building.build_cost()
            
            if game_state["wallet"].subtract_gold(cost):
                building.level += 1
                if building.level == 1:
                    building.built = True
                    action = "–ø–æ—Å—Ç—Ä–æ–µ–Ω–æ"
                else:
                    action = "—É–ª—É—á—à–µ–Ω–æ"
                
                loading_screen(2, f"{action.capitalize()} {building.name}")
                print(f"{building.name} {action} –¥–æ —É—Ä–æ–≤–Ω—è {building.level}!")
                print(f"–ù–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {building.effect()}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                game_state["save_system"].save_game(game_state, 1)
            else:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            
            press_enter_to_continue()

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            press_enter_to_continue()

def calculate_max_building_level(tower_level):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–∂–∞ –±–∞—à–Ω–∏
    –ö–∞–∂–¥—ã–µ 5 —ç—Ç–∞–∂–µ–π +1 –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
    """
    base_level = 1
    bonus_levels = tower_level // 5  # –ö–∞–∂–¥—ã–µ 5 —ç—Ç–∞–∂–µ–π +1 —É—Ä–æ–≤–µ–Ω—å
    return base_level + bonus_levels