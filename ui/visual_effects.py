# ui.visual_effects.py
import time
import random

class VisualEffects:
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∑–≤—ë–∑–¥
    STAR_COLORS = {
        1: "",          # –æ–±—ã—á–Ω—ã–π (–±–µ–∑ —Ü–≤–µ—Ç–∞)
        2: "\033[92m",  # –∑–µ–ª—ë–Ω—ã–π
        3: "\033[94m",  # —Å–∏–Ω–∏–π  
        4: "\033[95m",  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        5: "\033[93m",  # –∑–æ–ª–æ—Ç–æ–π
        6: "\033[96m",  # –±–∏—Ä—é–∑–æ–≤—ã–π (—Ä–∞–¥—É–∂–Ω—ã–π —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        7: "\033[91m",  # –∫—Ä–∞—Å–Ω—ã–π
    }
    
    RESET_COLOR = "\033[0m"
    
    @staticmethod
    def get_star_display(star_level, max_stars=7):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω—ã–µ –∑–≤—ë–∑–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if star_level < 1:
            star_level = 1
        if star_level > max_stars:
            star_level = max_stars
        
        color_code = VisualEffects.STAR_COLORS.get(star_level, "")
        filled_stars = "‚òÖ" * star_level
        empty_stars = "‚òÜ" * (max_stars - star_level)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        if color_code:
            return f"{color_code}{filled_stars}{VisualEffects.RESET_COLOR}{empty_stars}"
        else:
            return f"{filled_stars}{empty_stars}"
    
    @staticmethod
    def get_exp_bar(current_exp, exp_needed, width=20):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–ø—ã—Ç–∞"""
        if exp_needed <= 0:
            return "[" + "=" * width + "] 100%"
        
        percentage = min(100, int((current_exp / exp_needed) * 100))
        filled_width = int(width * percentage / 100)
        empty_width = width - filled_width
        
        # –¶–≤–µ—Ç –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∑–µ–ª—ë–Ω–æ–º—É
        if percentage < 30:
            color = "\033[91m"  # –∫—Ä–∞—Å–Ω—ã–π
        elif percentage < 70:
            color = "\033[93m"  # –∂—ë–ª—Ç—ã–π
        else:
            color = "\033[92m"  # –∑–µ–ª—ë–Ω—ã–π
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∏ –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
        filled_char = "‚ñà"
        empty_char = "‚ñë"
        
        bar = f"{color}[{filled_char * filled_width}{empty_char * empty_width}]{VisualEffects.RESET_COLOR} {percentage}%"
        return bar
    
    @staticmethod
    def format_hero_display(hero):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        star_display = VisualEffects.get_star_display(hero.star)
        exp_bar = VisualEffects.get_exp_bar(hero.experience, hero.exp_to_next_level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è
        level_color = ""
        if hero.level >= 50:
            level_color = "\033[93m"  # –∑–æ–ª–æ—Ç–æ–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        elif hero.level >= 20:
            level_color = "\033[94m"  # —Å–∏–Ω–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        
        level_display = f"{level_color}–£—Ä. {hero.level}{VisualEffects.RESET_COLOR}" if level_color else f"–£—Ä. {hero.level}"
        
        return (f"{star_display} {hero.name} ({level_display}) {hero.character}\n"
                f"‚ù§Ô∏è {hero.health_current}/{hero.health_max} | ‚ú® {hero.mana_current}/{hero.mana_max}\n"
                f"EXP: {exp_bar}")

    @staticmethod
    def achievement_unlock_effect(achievement_name):
        """–≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        print("\n" + "‚ú®" * 30)
        print(f"üéâ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û: {achievement_name}")
        print("‚ú®" * 30)
        
        # –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        for i in range(2):
            print("üåü " * 8)
            time.sleep(0.2)
            print("‚≠ê " * 8)
            time.sleep(0.2)
    
    @staticmethod
    def glowing_text(text, glow_char="‚ú®"):
        """–¢–µ–∫—Å—Ç —Å —Å–≤–µ—á–µ–Ω–∏–µ–º"""
        return f"{glow_char} {text} {glow_char}"
    
    @staticmethod
    def progress_bar(completed, total, width=20):
        """–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        progress = completed / total if total > 0 else 0
        filled = int(width * progress)
        bar = "‚ñà" * filled + "‚ñë" * (width - filled)
        return f"[{bar}] {completed}/{total} ({progress*100:.1f}%)"