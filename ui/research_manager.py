# ui/research_manager.py
from ui.ui_utils import print_header, loading_screen, press_enter_to_continue

def manage_research(game_state):
    """
    –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω, –∞–Ω–∏–º–∞—Ü–∏–∏, —É—Ä–æ–≤–Ω–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã (is_visible).
    """
    research_mgr = game_state["research"]
    lab = game_state["buildings"].get_building("laboratory")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    if lab is None or lab.level == 0:
        print_header("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è")
        print("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞! –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–¥–∞–Ω–∏—è–º–∏.")
        press_enter_to_continue()
        return

    while True:
        print_header("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è")
        print(f"–£—Ä–æ–≤–µ–Ω—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ - {lab.level}\n")

        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –≤–∏–¥–∏–º—ã–º–∏
        visible_keys = [k for k in research_mgr.researches.keys() if research_mgr.is_visible(k, game_state)]

        if not visible_keys:
            print("üìö –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n")
            print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–¥–∞–Ω–∏—è")
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            if choice in ("0", "b", "B"):
                break
            continue

        for i, key in enumerate(visible_keys, 1):
            r = research_mgr.researches[key]
            status = "‚úÖ" if r.is_researched and r.level >= r.max_level else "‚ùå"
            current = r.level
            max_lvl = r.max_level

            if current < max_lvl:
                nxt = current + 1
                cost = r.next_level_cost()
                can, msg = research_mgr.can_research(key, game_state)

                print(f"{i}. {status} {r.name}")
                print(f"   –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: —É—Ä.{current} ‚Üí —É—Ä.{nxt}")
                print(f"   {r.description}")
                print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost['gold']} –∑–æ–ª–æ—Ç–∞, {cost['crystals']} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤")
                print(f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —É—Ä.{r.min_lab_level}")
                if can:
                    print("   [–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è]")
                else:
                    print(f"   [–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {msg}]")
            else:
                # –ú–∞–∫—Å–∏–º—É–º
                print(f"{i}. ‚úÖ {r.name}")
                print(f"   {r.description}")
                print("   –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
            print()

        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–¥–∞–Ω–∏—è")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ").strip()
        if choice in ("0", "b", "B"):
            break

        if not choice.isdigit():
            press_enter_to_continue()
            continue

        idx = int(choice)
        if idx < 1 or idx > len(visible_keys):
            press_enter_to_continue()
            continue

        key = visible_keys[idx - 1]
        r = research_mgr.researches[key]

        if r.level >= r.max_level:
            print("‚ö†Ô∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ")
            press_enter_to_continue()
            continue

        can, msg = research_mgr.can_research(key, game_state)
        if not can:
            print(f"‚ùå –ù–µ–ª—å–∑—è –∏–∑—É—á–∏—Ç—å: {msg}")
            press_enter_to_continue()
            continue

        # –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è
        loading_screen(2, f"–ò–∑—É—á–µ–Ω–∏–µ {r.name} —É—Ä.{r.level + 1}")

        ok, msg = research_mgr.start_research(key, game_state)
        print(("‚úÖ " if ok else "‚ùå ") + msg)
        press_enter_to_continue()
