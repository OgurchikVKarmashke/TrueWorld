# achievements_menu.py
# ui.achievements_menu.pyfrom ui.ui_utils import print_header, press_enter_to_continue, loading_screen
from ui.ui_utils import print_header, press_enter_to_continue

def achievements_menu(game_state):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    achievement_system = game_state["achievement_system"]
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    achievement_system.mark_all_as_viewed()
    
    while True:
        completed_count = achievement_system.get_completed_count()
        total_count = achievement_system.get_total_count()
        
        print_header("üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} ({completed_count/total_count*100:.1f}%)")
        print()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        completed = []
        not_completed = []
        
        for achievement in achievement_system.achievements.values():
            if achievement.completed:
                completed.append(achievement)
            else:
                not_completed.append(achievement)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if completed:
            print("‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            for achievement in completed:
                date_str = achievement.completed_date.strftime("%d.%m.%Y") if achievement.completed_date else ""
                reward_text = f"+{achievement.reward_value} {achievement.reward_type}"
                print(f"üèÜ {achievement.name} - {reward_text} {date_str}")
                print(f"   {achievement.description}")
                print()
            
            print()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if not_completed:
            print("üîí –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
            for achievement in not_completed:
                print(f"üîí {achievement.name}")
                print(f"   {achievement.description}")
                print(f"   –ù–∞–≥—Ä–∞–¥–∞: +{achievement.reward_value} {achievement.reward_type}")
                print()
            
            print()

        print("0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        print()

        try:
            choice = int(input("üéØ –í–∞—à –≤—ã–±–æ—Ä: "))
            
            if choice == 0:
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—è '0' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
                press_enter_to_continue()
                
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
            press_enter_to_continue()

def show_achievement_notification(new_achievements):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
    if new_achievements:
        print("\nüéâ –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø!")
        print("‚ïê" * 30)
        for achievement in new_achievements:
            reward_text = f"+{achievement.reward_value} {achievement.reward_type}"
            print(f"üèÜ {achievement.name}")
            print(f"   {achievement.description}")
            print(f"   –ù–∞–≥—Ä–∞–¥–∞: {reward_text}")
            print()
        press_enter_to_continue()