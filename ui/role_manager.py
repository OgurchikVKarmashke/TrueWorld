#role_manager.py
from ui.ui_utils import print_header, press_enter_to_continue

from ui.ui_utils import print_header, press_enter_to_continue, loading_screen

def manage_roles(game_state):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –≥–µ—Ä–æ–µ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π
    if not is_role_system_available(game_state):
        print_header("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≥–µ—Ä–æ–µ–≤")
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        print()
        print("–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:")
        print("üç≥ –°—Ç–æ–ª–æ–≤—É—é (–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 7 —ç—Ç–∞–∂–∞)")
        print("‚öíÔ∏è –ö—É–∑–Ω–∏—Ü—É (–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 10 —ç—Ç–∞–∂–∞)") 
        print("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (–¥–æ—Å—Ç—É–ø–Ω–∞ —Å 5 —ç—Ç–∞–∂–∞)")
        print()
        print("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –±–∞—à–Ω—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —ç—Ç–∞–∂–∏!")
        press_enter_to_continue()
        return
    
    from systems.role_system import RoleSystem
    role_system = init_role_system(game_state)
    
    while True:
        print_header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –≥–µ—Ä–æ–µ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        assigned_heroes = role_system.get_assigned_heroes()
        available_heroes = role_system.get_available_heroes()
        
        print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
        print("‚ïê" * 40)
        
        has_assignments = False
        for role_name, role_info in role_system.roles.items():
            building = game_state["buildings"].get_building(role_info['building'])
            if building.built:
                assigned_hero = assigned_heroes.get(role_info['building'])
                if assigned_hero:
                    print(f"{role_info['title']}: ‚úÖ {assigned_hero.name}")
                    has_assignments = True
                else:
                    print(f"{role_info['title']}: ‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            else:
                print(f"{role_info['title']}: üîí –ó–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ")
        
        print()
        print("üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ—Ä–æ–∏:")
        print("‚ïê" * 40)
        
        if available_heroes:
            for i, hero in enumerate(available_heroes, 1):
                print(f"{i}. {hero.name} (–£—Ä. {hero.level})")
        else:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤")
            print("–í—Å–µ –≥–µ—Ä–æ–∏ –∑–∞–Ω—è—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª—è—Ö")
        
        print()
        print("1. üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –≥–µ—Ä–æ—è –Ω–∞ —Ä–æ–ª—å")
        print("2. üóëÔ∏è –°–Ω—è—Ç—å –≥–µ—Ä–æ—è —Å —Ä–æ–ª–∏")
        print("0. ‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        print()
        
        try:
            choice = int(input("üéØ –í–∞—à –≤—ã–±–æ—Ä: "))
        except ValueError:
            press_enter_to_continue()
            continue
        
        if choice == 0:
            break
        elif choice == 1:
            assign_hero_to_role(game_state, role_system, available_heroes)
        elif choice == 2:
            remove_hero_from_role(game_state, role_system, assigned_heroes)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            press_enter_to_continue()

def is_role_system_available(game_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π (–ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –Ω—É–∂–Ω—ã–µ –∑–¥–∞–Ω–∏—è)"""
    buildings = game_state["buildings"].buildings
    # –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞, –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ —Å —Ä–æ–ª—å—é
    return (buildings["canteen"].built or 
            buildings["forge"].built or 
            buildings["laboratory"].built)

def init_role_system(game_state):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π"""
    if game_state["role_system"] is None:
        from systems.role_system import RoleSystem
        game_state["role_system"] = RoleSystem(game_state)
    
    return game_state["role_system"]

def assign_hero_to_role(game_state, role_system, available_heroes):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –Ω–∞ —Ä–æ–ª—å"""
    if not available_heroes:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!")
        press_enter_to_continue()
        return
    
    print_header("üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –Ω–∞ —Ä–æ–ª—å")
    
    # –í—ã–±–æ—Ä —Ä–æ–ª–∏
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:")
    roles_list = []
    for i, (role_name, role_info) in enumerate(role_system.roles.items(), 1):
        building = game_state["buildings"].get_building(role_info['building'])
        if building.built:
            print(f"{i}. {role_info['title']} - {role_info['bonus']}")
            roles_list.append((role_name, role_info))
    
    if not roles_list:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π!")
        press_enter_to_continue()
        return
    
    try:
        role_choice = int(input("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: "))
        if not 1 <= role_choice <= len(roles_list):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        press_enter_to_continue()
        return
    
    role_name, role_info = roles_list[role_choice - 1]
    
    # –í—ã–±–æ—Ä –≥–µ—Ä–æ—è
    print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è —Ä–æ–ª–∏ {role_info['title']}:")
    for i, hero in enumerate(available_heroes, 1):
        print(f"{i}. {hero.name} (–£—Ä. {hero.level})")
    
    try:
        hero_choice = int(input("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è: "))
        if not 1 <= hero_choice <= len(available_heroes):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        press_enter_to_continue()
        return
    
    hero = available_heroes[hero_choice - 1]
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    success, message = role_system.assign_hero(role_name, hero)
    print(message)
    press_enter_to_continue()

def remove_hero_from_role(game_state, role_system, assigned_heroes):
    """–°–Ω—è—Ç–∏–µ –≥–µ—Ä–æ—è —Å —Ä–æ–ª–∏"""
    if not assigned_heroes:
        print("‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤!")
        press_enter_to_continue()
        return
    
    print_header("üóëÔ∏è –°–Ω—è—Ç–∏–µ –≥–µ—Ä–æ—è —Å —Ä–æ–ª–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    assignments = []
    for building_name, hero in assigned_heroes.items():
        for role_name, role_info in role_system.roles.items():
            if role_info['building'] == building_name:
                assignments.append((role_name, role_info, hero))
    
    for i, (role_name, role_info, hero) in enumerate(assignments, 1):
        print(f"{i}. {role_info['title']}: {hero.name}")
    
    try:
        choice = int(input("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
        if not 1 <= choice <= len(assignments):
            raise ValueError
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        press_enter_to_continue()
        return
    
    role_name, role_info, hero = assignments[choice - 1]
    role_system.remove_hero_from_all_roles(hero)
    print(f"‚úÖ {hero.name} —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ {role_info['title']}!")
    press_enter_to_continue()