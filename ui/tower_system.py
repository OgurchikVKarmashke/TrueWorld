# tower_system.py
from systems.hero_system import Hero
from ui.ui_utils import print_header, loading_screen, press_enter_to_continue
from systems.combat_system import Combat
from systems.party_system import PartySystem
from game_data.monsters_data import MONSTER_SPAWN_CHANCES
import random

def choose_parties_for_floor(game_state, required_groups=1):
    party_system = PartySystem(game_state)
    available_parties = list(party_system.parties.items())

    while True:
        print_header("‚öîÔ∏è –í—ã–±–æ—Ä –±–æ–µ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –±–∞—à–Ω–∏")

        for i, (party_id, party_data) in enumerate(available_parties, 1):
            heroes = party_system.get_party_heroes(party_id)
            hero_names = ", ".join([h.name for h in heroes]) or "‚Äî –ø—É—Å—Ç–æ ‚Äî"
            print(f"{i}. {party_data['name']} ‚Üí [{hero_names}]")

        print(f"\n–≠—Ç–∞–∂ —Ç—Ä–µ–±—É–µ—Ç –≥—Ä—É–ø–ø: {required_groups}")
        print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()

        if choice in ("0", "b", "B"):
            return None, None

        try:
            chosen_ids = [int(x) for x in choice.split(",") if x.strip().isdigit()]
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")
            press_enter_to_continue()
            continue

        if len(chosen_ids) != required_groups:
            print(f"‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ {required_groups} –≥—Ä—É–ø–ø—ã!")
            press_enter_to_continue()
            continue

        chosen_parties = []
        chosen_party_ids = []
        for idx in chosen_ids:
            if 1 <= idx <= len(available_parties):
                pid, pdata = available_parties[idx - 1]
                chosen_parties.append(pdata)
                chosen_party_ids.append(pid)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!")
                break
        else:
            return chosen_parties, chosen_party_ids

def send_to_tower(game_state):
    print_header("üè∞ –ë–∞—à–Ω—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    current_floor = game_state["tower_level"]

    required_groups = 1
    if current_floor % 10 == 0:
        required_groups = 2

    selected_parties, selected_party_ids = choose_parties_for_floor(game_state, required_groups)
    if selected_parties is None:
        return

    active_party_heroes = []
    for party_id in selected_party_ids:
        heroes = PartySystem(game_state).get_party_heroes(party_id)
        active_party_heroes.extend(heroes)

    if not active_party_heroes:
        print("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Ç –≥–µ—Ä–æ–µ–≤!")
        press_enter_to_continue()
        return

    print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
    print("üéØ –°–æ—Å—Ç–∞–≤ –æ—Ç—Ä—è–¥–∞:")
    print("-" * 30)

    for i, hero in enumerate(active_party_heroes, 1):
        status = "‚úÖ –ì–æ—Ç–æ–≤" if hero.is_alive else "‚ùå –ù–µ—Å–ø–æ—Å–æ–±–µ–Ω"
        star_symbol = "‚òÖ" * hero.star
        print(f"{i}. {hero.name} {star_symbol}")
        print(f"   üìà –£—Ä. {hero.level} | {status}")
        print(f"   ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hero.health_current}/{hero.health_max}")
    
    print("\n1. ‚öîÔ∏è –ù–∞—á–∞—Ç—å –≤—ã–ª–∞–∑–∫—É")
    print("2. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä")
    print()

    try:
        choice = int(input("–í—ã–±–æ—Ä: "))
    except ValueError:
        press_enter_to_continue()
        return
    
    if choice == 2:
        return
    
    loading_screen(2, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—Ä—è–¥–∞")
    
    combat = Combat(active_party_heroes, current_floor, game_state)
    victory, log, total_exp = combat.start_combat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –±–æ—è
    game_state["save_system"].save_game(game_state)
    
    if victory:
        reward = current_floor * 25
        game_state["wallet"].add_gold(reward)
        game_state["tower_level"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂
        if game_state["tower_level"] > game_state.get("max_tower_floor", 1):
            game_state["max_tower_floor"] = game_state["tower_level"]

        living_heroes = [h for h in active_party_heroes if h.is_alive]
        dead_heroes = [h for h in active_party_heroes if not h.is_alive]
        
        if living_heroes and total_exp > 0:
            exp_per_hero = total_exp // len(living_heroes)
            for hero in living_heroes:
                result = hero.add_experience(exp_per_hero)
                if result:
                    print(result)

        party_system = PartySystem(game_state)
        for party_id in selected_party_ids:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã, —É–±–∏—Ä–∞—è –ø–æ–≥–∏–±—à–∏—Ö –≥–µ—Ä–æ–µ–≤
            party_heroes = party_system.get_party_heroes(party_id)
            party_system.parties[party_id]["heroes"] = [id(h) for h in party_heroes if h.is_alive]

        print(f"\nüéâ –ü–û–ë–ï–î–ê!")
        print(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–æ–ª–æ—Ç–∞")
        print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: {total_exp}")
        
        if dead_heroes:
            print("üíÄ –ü–æ–≥–∏–±—à–∏–µ –≤ –±–æ—é:")
            for hero in dead_heroes:
                print(f"- {hero.name}")
        print(f"üèÜ –î–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–∞–∂ {game_state['tower_level']}")
        
    else:
        dead_heroes = [h for h in active_party_heroes if not h.is_alive]
        living_heroes = [h for h in active_party_heroes if h.is_alive]
        
        party_system = PartySystem(game_state)
        for party_id in selected_party_ids:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã
            party_heroes = party_system.get_party_heroes(party_id)
            party_system.parties[party_id]["heroes"] = [id(h) for h in party_heroes if h.is_alive]

        print("\nüí• –ü–û–†–ê–ñ–ï–ù–ò–ï")
        print("üíÄ –ü–æ–≥–∏–±—à–∏–µ:")
        for hero in dead_heroes:
            print(f"- {hero.name} (–£—Ä. {hero.level})")
        
        game_state["tower_level"] = max(1, current_floor - 1)
        print(f"üîô –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∫ —ç—Ç–∞–∂—É {game_state['tower_level']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    game_state["save_system"].save_game(game_state)
    press_enter_to_continue()
    
    return victory


def show_floor_monster_info(floor_level):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —ç—Ç–∞–∂–µ"""
    from systems.combat_system import Monster
    from game_data.monsters_data import MONSTER_BASE_STATS, BOSS_STATS
    
    print(f"\nüìä –ú–æ–Ω—Å—Ç—Ä—ã –Ω–∞ —ç—Ç–∞–∂–µ {floor_level}:")
    
    if floor_level % 5 == 0:
        # –ë–æ—Å—Å-—ç—Ç–∞–∂
        possible_bosses = []
        for boss_name, boss_data in BOSS_STATS.items():
            if floor_level >= boss_data["min_level"]:
                possible_bosses.append(boss_name)
        
        if possible_bosses:
            boss_name = random.choice(possible_bosses)
            boss_level = floor_level + 2
            monster = Monster(boss_name, boss_level, "boss")
            print(f"üëë –ë–û–°–°: {boss_name} (–£—Ä. {boss_level})")
            print(f"   ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {monster.health_max}")
            print(f"   ‚öîÔ∏è –ê—Ç–∞–∫–∞: {monster.attack}")
            print(f"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {monster.defense}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Å—Å–∞
            from game_data.bosses_data import BOSS_ABILITIES
            if boss_name in BOSS_ABILITIES:
                print(f"   ‚ú® –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:")
                for ability_name, ability_data in BOSS_ABILITIES[boss_name].items():
                    print(f"      - {ability_name} (—à–∞–Ω—Å: {ability_data['chance']*100}%)")
        else:
            print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Å—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        # –û–±—ã—á–Ω—ã–π —ç—Ç–∞–∂
        floor_chances = {}
        for floor, chances in MONSTER_SPAWN_CHANCES.items():
            if floor_level <= floor:
                floor_chances = chances
                break
        
        if not floor_chances:
            floor_chances = MONSTER_SPAWN_CHANCES[max(MONSTER_SPAWN_CHANCES.keys())]
        
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –º–æ–Ω—Å—Ç—Ä—ã:")
        for monster_type, chance in floor_chances.items():
            monster_data = MONSTER_BASE_STATS.get(monster_type, {})
            level = max(1, floor_level + random.randint(-1, 1))
            health = monster_data.get("health_per_level", 8) * level
            attack = monster_data.get("attack_per_level", 2) * level
            defense = monster_data.get("defense_per_level", 1) * level
            
            print(f"  {monster_type}: ‚ù§Ô∏è{health} ‚öîÔ∏è{attack} üõ°Ô∏è{defense} (—à–∞–Ω—Å: {chance})")

def view_tower_progress(game_state):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –±–∞—à–Ω–µ"""
    print_header("üè∞ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–∞—à–Ω–µ –ò—Å–ø—ã—Ç–∞–Ω–∏–π")
    
    current_floor = game_state["tower_level"]
    max_floor_reached = game_state.get("max_tower_floor", current_floor)
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
    print(f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π: {max_floor_reached}")
    print(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂: {current_floor * 25} –∑–æ–ª–æ—Ç–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–∂–µ
    show_floor_monster_info(current_floor)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
    if current_floor % 5 == 0:
        next_boss_floor = current_floor + 5
        print(f"\n‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–π –±–æ—Å—Å –Ω–∞ —ç—Ç–∞–∂–µ: {next_boss_floor}")
    elif (current_floor + 1) % 5 == 0:
        print(f"\n‚ö° –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂: –ë–û–°–°-–ë–û–ô!")
    
    if current_floor % 10 == 0:
        next_multi_party_floor = current_floor + 10
        print(f"\nüë• –ù–∞ —ç—Ç–∞–∂–µ {next_multi_party_floor} –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –≥—Ä—É–ø–ø—ã")
    
    print("\n–û—Å–æ–±—ã–µ —ç—Ç–∞–∂–∏:")
    for floor in [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]:
        if floor <= max_floor_reached + 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ —ç—Ç–∞–∂–∏
            status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if current_floor > floor else "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if current_floor < floor else "üéØ –¢–µ–∫—É—â–∏–π"
            if floor % 5 == 0:
                print(f"  {floor}F - –ë–æ—Å—Å - {status}")
            else:
                print(f"  {floor}F - –û–±—ã—á–Ω—ã–π - {status}")
    
    press_enter_to_continue()

def heal_all_heroes(game_state):
    """–õ–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∑–∞ –∑–æ–ª–æ—Ç–æ"""
    wallet = game_state["wallet"]
    healing_cost = 100
    
    if wallet.gold < healing_cost:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {healing_cost}, –µ—Å—Ç—å {wallet.gold}")
        press_enter_to_continue()
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≥–µ—Ä–æ–µ–≤ –Ω—É–∂–Ω–æ –≤—ã–ª–µ—á–∏—Ç—å
    wounded_heroes = [h for h in game_state["heroes"] if h.is_alive and h.health_current < h.health_max]
    
    if not wounded_heroes:
        print("‚úÖ –í—Å–µ –≥–µ—Ä–æ–∏ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤—ã!")
        press_enter_to_continue()
        return
    
    print(f"üíä –õ–µ—á–µ–Ω–∏–µ {len(wounded_heroes)} –≥–µ—Ä–æ–µ–≤: {healing_cost} –∑–æ–ª–æ—Ç–∞")
    print("1. ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ")
    print("2. ‚ùå –û—Ç–º–µ–Ω–∞")
    
    try:
        confirm = int(input("–í—ã–±–æ—Ä: "))
    except ValueError:
        press_enter_to_continue()
        return
    
    if confirm == 1:
        wallet.spend_gold(healing_cost)
        for hero in wounded_heroes:
            hero.health_current = hero.health_max
            hero.mana_current = hero.mana_max
        
        print(f"‚úÖ –í—Å–µ –≥–µ—Ä–æ–∏ –≤—ã–ª–µ—á–µ–Ω—ã! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {healing_cost} –∑–æ–ª–æ—Ç–∞")
    else:
        print("‚ùå –õ–µ—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    press_enter_to_continue()

def tower_management(game_state):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—à–Ω–µ–π"""
    while True:
        print_header("üè∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–∞—à–Ω–µ–π –ò—Å–ø—ã—Ç–∞–Ω–∏–π")
        
        current_floor = game_state["tower_level"]
        heroes_available = sum(1 for hero in game_state["heroes"] if hero.is_alive)
        
        print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
        print(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤: {heroes_available}")
        print(f"üí∞ –ó–æ–ª–æ—Ç–æ: {game_state['wallet'].gold}")
        
        print("\n1. ‚öîÔ∏è  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞—à–Ω—é")
        print("2. üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
        print("3. üè• –õ–µ—á–∏—Ç—å –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ (100 –∑–æ–ª–æ—Ç–∞)")
        print("4. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print()
        
        try:
            choice = int(input("–í—ã–±–æ—Ä: "))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
            press_enter_to_continue()
            continue
        
        if choice == 1:
            send_to_tower(game_state)
        elif choice == 2:
            view_tower_progress(game_state)
        elif choice == 3:
            heal_all_heroes(game_state)
        elif choice == 4:
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            press_enter_to_continue()