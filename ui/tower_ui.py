# ui.tower_ui.py
from game_data.tower_rewards import get_floor_rewards, generate_item_rewards
from systems.difficulty_system import DifficultySystem
from ui.ui_utils import print_header, press_enter_to_continue, loading_screen, clear_screen
from ui.visual_effects import VisualEffects
import time
import random

def display_tower_header(title):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–∞—à–Ω–∏"""
    clear_screen()
    print("=" * 50)
    print(f"=== {title.upper()} ===")
    print("=" * 50)
    print()

def show_tower_management_menu(game_state):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—à–Ω–µ–π"""
    display_tower_header("üè∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–∞—à–Ω–µ–π –ò—Å–ø—ã—Ç–∞–Ω–∏–π")
    
    current_floor = game_state["tower_level"]
    heroes_available = sum(1 for hero in game_state["heroes"] if hero.is_alive)
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
    print(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤: {heroes_available}")
    print(f"üí∞ –ó–æ–ª–æ—Ç–æ: {game_state['wallet'].gold}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂
    rewards = get_floor_rewards(current_floor)
    print(f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {rewards['gold']} –∑–æ–ª–æ—Ç–∞ + –ø—Ä–µ–¥–º–µ—Ç—ã")
    
    print("\n1. ‚öîÔ∏è  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞—à–Ω—é")
    print("2. üìà –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    print("3. üè• –õ–µ—á–∏—Ç—å –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ (100 –∑–æ–ª–æ—Ç–∞)")
    print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print()
    
    try:
        return int(input("–í—ã–±–æ—Ä: "))
    except ValueError:
        return None

def show_party_selection(available_parties, required_groups, game_state):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è –±–∞—à–Ω–∏"""
    display_tower_header("‚öîÔ∏è –í—ã–±–æ—Ä –±–æ–µ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –±–∞—à–Ω–∏")
    
    print(f"üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –≥—Ä—É–ø–ø: {required_groups}")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
    print("-" * 50)
    
    for i, (party_id, party_data) in enumerate(available_parties, 1):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≥–µ—Ä–æ–µ–≤ –∏–∑ game_state
        hero_objects = []
        for hero_id in party_data["heroes"]:
            for hero in game_state["heroes"]:
                if id(hero) == hero_id:
                    hero_objects.append(hero)
                    break
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∂–∏–≤—ã—Ö –≥–µ—Ä–æ–µ–≤
        alive_heroes = [h for h in hero_objects if h.is_alive]
        total_power = sum(h.attack + h.defense for h in alive_heroes)
        
        print(f"{i}. {party_data['name']}")
        print(f"   üë• –ì–µ—Ä–æ–µ–≤: {len(alive_heroes)}/{len(hero_objects)}")
        print(f"   üí™ –°–∏–ª–∞: {total_power}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤
        if alive_heroes:
            hero_names = ", ".join([h.name for h in alive_heroes[:3]])
            if len(alive_heroes) > 3:
                hero_names += f" ... (+{len(alive_heroes) - 3})"
            print(f"   üéØ –°–æ—Å—Ç–∞–≤: {hero_names}")
        else:
            print("   ‚ùå –ù–µ—Ç –∂–∏–≤—ã—Ö –≥–µ—Ä–æ–µ–≤!")
        print()

    print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    print("-" * 50)
    
    if required_groups > 1:
        print("üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
    else:
        print("üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
    
    try:
        choice = input("üéØ –í–∞—à –≤—ã–±–æ—Ä: ").strip()
        if choice.lower() in ['0', 'b', 'back']:
            return "0"
        return choice
    except:
        return "0"

def show_expedition_preview(active_party_heroes, current_floor):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ª–∞–∑–∫–∏"""
    display_tower_header("üè∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ª–∞–∑–∫–µ")
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
    print("üéØ –°–æ—Å—Ç–∞–≤ –æ—Ç—Ä—è–¥–∞:")
    print("-" * 30)

    for i, hero in enumerate(active_party_heroes, 1):
        status = "‚úÖ –ì–æ—Ç–æ–≤" if hero.is_alive else "‚ùå –ù–µ—Å–ø–æ—Å–æ–±–µ–Ω"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ VisualEffects
        star_display = VisualEffects.get_star_display(hero.star)
        print(f"{i}. {hero.name} {star_display}")
        print(f"   üìà –£—Ä. {hero.level} | {status}")
        print(f"   ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hero.health_current}/{hero.health_max}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∏–ª—É –æ—Ç—Ä—è–¥–∞
    total_power = sum(h.attack + h.defense for h in active_party_heroes if h.is_alive)
    print(f"\nüí™ –û–±—â–∞—è —Å–∏–ª–∞ –æ—Ç—Ä—è–¥–∞: {total_power}")
    
    print("\n1. ‚öîÔ∏è –ù–∞—á–∞—Ç—å –≤—ã–ª–∞–∑–∫—É")
    print("0. ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä")
    print()
    
    try:
        return int(input("–í—ã–±–æ—Ä: "))
    except ValueError:
        return None

def show_victory_screen(reward, total_exp, new_floor, dead_heroes, item_rewards=None, game_state=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏"""
    display_tower_header("üéâ –ü–û–ë–ï–î–ê!")
    print(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–æ–ª–æ—Ç–∞")
    print(f"üìà –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: {total_exp}")
    
    # –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–õ–£–ß–ï–ù–ù–´–ï –ü–†–ï–î–ú–ï–¢–´
    if item_rewards:
        print("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:")
        for item_id, quantity in item_rewards.items():
            if game_state and "item_manager" in game_state:
                item = game_state["item_manager"].get_item(item_id)
                if item:
                    print(f"   - {item.name} x{quantity}")
            else:
                # –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ game_state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                print(f"   - –ü—Ä–µ–¥–º–µ—Ç ID: {item_id} x{quantity}")
    
    if dead_heroes:
        print("üíÄ –ü–æ–≥–∏–±—à–∏–µ –≤ –±–æ—é:")
        for hero in dead_heroes:
            print(f"- {hero.name}")
    
    print(f"üèÜ –î–æ—Å—Ç—É–ø–µ–Ω —ç—Ç–∞–∂ {new_floor}")
    press_enter_to_continue()

def show_defeat_screen(dead_heroes, retreat_floor):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è"""
    display_tower_header("üí• –ü–û–†–ê–ñ–ï–ù–ò–ï")
    print("üíÄ –ü–æ–≥–∏–±—à–∏–µ:")
    for hero in dead_heroes:
        print(f"- {hero.name} (–£—Ä. {hero.level})")
    
    print(f"üîô –û—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∫ —ç—Ç–∞–∂—É {retreat_floor}")
    press_enter_to_continue()

def show_tower_progress(game_state, floor_info):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—à–Ω–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö"""
    display_tower_header("üè∞ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–∞—à–Ω–µ –ò—Å–ø—ã—Ç–∞–Ω–∏–π")
    
    current_floor = game_state["tower_level"]
    max_floor_reached = game_state.get("max_tower_floor", current_floor)
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {current_floor}")
    print(f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π: {max_floor_reached}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã
    print(f"\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–∞–∂–∏:")
    
    # –¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂
    current_rewards = get_floor_rewards(current_floor)
    print(f"   {current_floor}F: {current_rewards['gold']} –∑–æ–ª–æ—Ç–∞ + –ø—Ä–µ–¥–º–µ—Ç—ã")
    
    # –°–ª–µ–¥—É—é—â–∏–µ 5 —ç—Ç–∞–ø–æ–≤
    for floor in range(current_floor + 1, min(current_floor + 6, 101)):
        rewards = get_floor_rewards(floor)
        status = "üîí " if floor > max_floor_reached else "üîì "
        print(f"   {status}{floor}F: {rewards['gold']} –∑–æ–ª–æ—Ç–∞ + –ø—Ä–µ–¥–º–µ—Ç—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö
    print(f"\n{floor_info}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
    if current_floor % 5 == 0:
        next_boss_floor = current_floor + 5
        print(f"‚ö†Ô∏è  –°–ª–µ–¥—É—é—â–∏–π –±–æ—Å—Å –Ω–∞ —ç—Ç–∞–∂–µ: {next_boss_floor}")
    elif (current_floor + 1) % 5 == 0:
        print(f"‚ö° –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂: –ë–û–°–°-–ë–û–ô!")
    
    if current_floor % 10 == 0:
        next_multi_party_floor = current_floor + 10
        print(f"üë• –ù–∞ —ç—Ç–∞–∂–µ {next_multi_party_floor} –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –≥—Ä—É–ø–ø—ã")
    
    print("\n–û—Å–æ–±—ã–µ —ç—Ç–∞–∂–∏:")
    for floor in [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]:
        if floor <= max_floor_reached + 5:
            status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if current_floor > floor else "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if current_floor < floor else "üéØ –¢–µ–∫—É—â–∏–π"
            rewards = get_floor_rewards(floor)
            if floor % 5 == 0:
                print(f"  {floor}F - –ë–æ—Å—Å - {status} - {rewards['gold']} –∑–æ–ª–æ—Ç–∞")
            else:
                print(f"  {floor}F - –û–±—ã—á–Ω—ã–π - {status} - {rewards['gold']} –∑–æ–ª–æ—Ç–∞")
    
    press_enter_to_continue()

def show_detailed_rewards(game_state, floor_number):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö –∑–∞ —ç—Ç–∞–∂"""
    display_tower_header(f"üéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–∞–∂ {floor_number}")
    
    rewards = get_floor_rewards(floor_number)
    item_manager = game_state["item_manager"]
    
    print(f"üí∞ –ó–æ–ª–æ—Ç–æ: {rewards['gold']}")
    print(f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {rewards['crystals']}")
    
    if "items" in rewards:
        print("üì¶ –ü—Ä–µ–¥–º–µ—Ç—ã:")
        for item_id, (min_qty, max_qty) in rewards["items"].items():
            item = item_manager.get_item(item_id)
            if item:
                chance = "–í—ã—Å–æ–∫–∏–π" if max_qty > 3 else "–°—Ä–µ–¥–Ω–∏–π" if max_qty > 1 else "–ù–∏–∑–∫–∏–π"
                print(f"   - {item.name}: {min_qty}-{max_qty} —à—Ç. ({chance} —à–∞–Ω—Å)")
    
    if "unlocks" in rewards:
        print("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        for unlock in rewards["unlocks"]:
            if unlock.endswith("_recipe"):
                recipe_name = unlock.replace("_recipe", "").replace("_", " ").title()
                print(f"   - –†–µ—Ü–µ–ø—Ç: {recipe_name}")
    
    press_enter_to_continue()

def show_healing_confirmation(wounded_count, cost):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è"""
    display_tower_header("üè• –õ–µ—á–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤")
    print(f"üíä –õ–µ—á–µ–Ω–∏–µ {wounded_count} –≥–µ—Ä–æ–µ–≤: {cost} –∑–æ–ª–æ—Ç–∞")
    print("1. ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ")
    print("0. ‚ùå –û—Ç–º–µ–Ω–∞")
    print()
    
    try:
        return int(input("–í—ã–±–æ—Ä: "))
    except ValueError:
        return None